@page "/Anagrafica"
@page "/Anagrafica/{tempMedID}"
@using System.ComponentModel
@using MySqlConnector;
<PageTitle>Anagrafica</PageTitle>
@rendermode InteractiveServer


<div class="corpo">
    <div class="toolbar">
        <div class="slideContainer">
            <button class="slideSelez">PAZIENTI</button>
            <button class="slide">CLIENTI</button>
            <button class="slide">FORNITORI</button>
            <button class="slide">CONTATTI</button>
        </div>
        <div class="buttonContainer">
            <button class="defButton" @onclick="@toggleForm">AGGIUNGI</button>
            <button class="defButton" @onclick="openModifyPatient">MODIFICA</button>
            <button class="defButton" @onclick="deleteFromDB">ELIMINA</button>
            <button class="defButtonSmall" @onclick="populator">STAMPA</button>
            <input type="text" placeholder="Ricerca" @bind-value="searchValue" @oninput="searchPatient" class="inputSmall"/>
            <div class="insNumero">
                <div class="side">N</div>
                <input type="number" class="number"/>
            </div>
            <div class="insNumero">
                <div class="side">P</div>
                <input type="number" min="1" class="number" @bind="nPage" @oninput="changePage"/>
            </div>
            <input type="text" placeholder="Avanzata" class="inputLarge"/>
        </div>
    </div>

    <div class="list">
        <table class="styled-table">
            <thead>
            <tr class="headTable">
                <th>COGNOME</th>
                <th>NOME</th>
                <th>DATA DI NASCITA</th>
                <th>TELEFONO</th>
                <th>CELLULARE</th>
                <th>CELLULARE 2</th>
                <th>DA FATTURARE</th>
                <th>TERMINATE</th>
                <th>DOCUMENTATO</th>
                <th>
                    <div>Lock</div>
                </th>
            </tr>
            </thead>
            <tbody>

            <!-- Qui vengono aggiunte le righe della tabella -->
            @foreach (var paziente in pazientiFiltrati)
            {
                <tr @onclick="() => updateLastClicked(paziente)">
                    <td>@paziente.Surname</td>
                    <td>@paziente.FirstName</td>
                    <td>@DateOnly.FromDateTime(paziente.BirthDate)</td>
                    <td>@paziente.Telephone</td>
                    <td>@paziente.Phone1</td>
                    <td>@paziente.Phone2</td>
                    <td>@paziente.Billable</td>
                    <td>@(paziente.Completed ? "SÌ" : "NO")</td>
                    <td>@(paziente.Documented ? "SÌ" : "NO")</td>
                    <td>
                        <input type="checkbox"/>
                    </td>
                </tr>
            }

            </tbody>
        </table>

    </div>
</div>


@if (visible)
{
    <div class="oscuramento">
        <!-- div contenente il pop-up per l'inserimento dei dati -->
        <div class="Inserimento">
            <!-- div contenente la barra superiore -->
            <div>
                <div class="inline buttonFormContainer">
                    <button class="buttonFormSelected">DATI PERSONALI</button>
                    <button class="buttonForm">FAMILIARI</button>
                    <button class="buttonForm">CONTATTI - FATTURAZIONE</button>
                    <button class="buttonForm">NOTE</button>
                </div>
                <div class="inline">
                    <button @onclick="@toggleForm" class="exitButton">X</button>
                </div>
            </div>
            <div class="containerForm">
                <div class="forms">
                    <!-- div colonna a sinistra -->
                    <div class=" sx">
                        <!-- div contenente i form principali -->
                        <div>
                            <div class="inline containerInput">
                                COGNOME*<br/>
                                <input type="text" @bind="nuovoPaziente.Surname" class="inputForm" placeholder="Poretti" maxlength="25"/>
                            </div>
                            <div class="inline containerInput">
                                NOME*<br/>
                                <input type="text" @bind="nuovoPaziente.FirstName" class="inputForm" placeholder="Giacomo" maxlength="25"/>
                            </div><br/>
                            <div class="inline containerInput">
                                <div>
                                    LUOGO DI NASCITA
                                    <div class="inline checkbox">estero<input @bind="nuovoPaziente.Foreigner" type="checkbox" maxlength="25"></div>
                                </div>
                                <input type="text" class="inputForm" placeholder="Milano"/>
                            </div>
                            <div class="inline containerInputSmall">
                                PROVINCIA<br/>
                                <input type="text" @bind="nuovoPaziente.BirthProvince" class="inputForm" placeholder="Milano" maxlength="25"/>
                            </div>
                            <div class="inline containerInputSmall">
                                SESSO<br/>
                                <select type="select" @bind="gender" class="inputFormScleta" placeholder=" ">
                                    <option value="m">Maschio</option>
                                    <option value="f">Femmina</option>
                                </select>
                            </div><br/>
                            <div class="inline containerInputSmall">
                                DATA NASCITA<br/>
                                <input type="date" @bind="nuovoPaziente.BirthDate" class="inputFormData" EnableMinMax="true" min="1900-01-01" max="@today"/>
                            </div>
                            <div class="inline containerInputSmall">
                                CODICE ASL<br/>
                                <input type="text" @bind="nuovoPaziente.CAsl" class="inputForm" placeholder="MI333" maxlength="5"/>
                            </div>
                            <div class="inline containerInput">
                                <div>
                                    CODICE FISCALE
                                    <div class="inline checkbox">cont. validità<input type="checkbox" maxlength="16"></div>
                                </div>
                                <input type="text" class="inputForm" @bind="nuovoPaziente.CF" placeholder="PRTGCM64H07F205D"/>
                            </div><br/>
                            <div class="inline containerInputSmall">
                                CATEGORIA<br/>
                                <select type="select" class="inputFormScleta" placeholder=" ">
                                    <option value="p">Prova</option>
                                </select>
                            </div>
                            <div class="inline containerInputSmall">
                                MEDICO<br/>
                                <input type="text" @bind="nuovoPaziente.DoctorID" class="inputForm" placeholder="Ippocrate" maxlength="25"/>
                            </div>
                            <div class="inline containerInput">
                                PROFESSIONE<br/>
                                <select type="select" class="inputFormScleta" placeholder=" ">
                                    <option value="p">Prova</option>
                                </select>
                            </div><br/>
                            <div class="inline containerInputLarge">
                                INDIRIZZI<br/>
                                <input type="text" class="inputFormLarge" placeholder="Via ..." maxlength="25"/>
                            </div>
                        </div>

                    </div><!-- div contenente le referenze -->
                    <br/>
                    <div class="sx">
                        REFERENZE<br/>
                        <div class="inline pulsanti">
                            <button class="buttonOpzioniForm">MOTIVO</button>
                            <button class="buttonOpzioniForm">NOMINATIVO</button>
                            <button class="buttonOpzioniForm">NOTE</button>
                        </div>
                    </div>
                </div>
                <!-- div colonna destra contenente i tasti di salvataggio ecc. -->
                <div class="dx">
                    <button class="buttonAzioniForm" @onclick="savePatient">SALVA E CHIUDI</button><br/>
                    <button class="buttonAzioniForm">SALVA E APRI</button><br/>
                    <button class="buttonAzioniForm" @onclick="toggleForm">ANNULLA</button><br/>
                    <button class="buttonAzioniForm">STAMPA</button><br/>
                    @if (showFormErr)
                    {
                        <div>Verificare i dati immessi</div>
                    }
                    <button class="buttonAzioniFormIcona">IMPORTA CLIENTE</button>
                </div>
            </div>
        </div>

    </div>
}

@code {

    private string today = DateTime.Now.Year + "-" + DateTime.Now.Month + "-" + DateTime.Now.Day;
    [Parameter] public string tempMedID { get; set; }
    private int medID { get; set; }

    DBPopulator dbPopulator = new DBPopulator();
    DbManager db = new DbManager();

    Paziente nuovoPaziente = new();
    Paziente lastClickedP = null;
    List<Paziente> pazienti = new();
    List<Paziente> pazientiFiltrati = new();

    private string gender = null!;
    private string filePath;
    private string searchValue = string.Empty;
    private bool showFormErr = false;
    private bool visible = false;
    private int nPage = 1;
    private int patientsDisplayed = 50;

    protected override async Task OnInitializedAsync()
    {
        if (tempMedID != null)
        {
            medID = Int32.Parse(tempMedID);
        }
        else
        {
            //else di sviluppo, per non dover fare il login ogni volta
            medID = 1;
        }

        //medID = Int32.Parse(tempMedID);
        await getPatientFromDB(0, patientsDisplayed);
    }

    public void populator()
    {
        dbPopulator.Populator(FlagPatient: true);
    }

    private void toggleForm()
    {
        visible = !visible;
        lastClickedP = null;
    }

    private void searchPatient(ChangeEventArgs e)
    {
        searchValue = e.Value.ToString();
        var searchTerms = searchValue.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        pazientiFiltrati = pazienti.Where(p =>
            searchTerms.All(term =>
                p.FirstName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                p.Surname.Contains(term, StringComparison.OrdinalIgnoreCase)
            )
        ).ToList();
    }

    public void updateLastClicked(Paziente p) => lastClickedP = p;

    public void changePage()
    {
        if (nPage > 0)
        {
            getPatientFromDB(patientsDisplayed * nPage - patientsDisplayed, patientsDisplayed * nPage);
        }
    }

    // Metodi con utilizzo del database
    public async Task<int?> getMinPatientID()
    {
        string queryMinPatientID = $"SELECT MIN(patientID) FROM PATIENT WHERE doctorID={medID}";
        MySqlDataReader reader;

        await db.OpenConnectionAsync();
        reader = await db.ExecuteReaderAsync(queryMinPatientID);

        if (!await reader.ReadAsync())
        {
            await db.CloseConnectionAsync();
            return null;
        }

        int minPID = reader.GetInt32("MIN(patientID)");
        await db.CloseConnectionAsync();
        await db.CloseReaderAsync(reader);
        return minPID;
    }

    public async Task getPatientFromDB(int minRow, int maxRow)
    {
        pazienti = new();

        var minPID = await getMinPatientID();
        if (minPID == null)
        {
            Console.WriteLine("Errore durante il recupero del minimo patientID");
            return;
        }

        var queryRangePatient = $"SELECT * FROM PATIENT WHERE patientID BETWEEN {minPID + minRow} AND {minPID + maxRow} AND doctorID = {medID}";

        await db.OpenConnectionAsync();

        using (var reader = await db.ExecuteReaderAsync(queryRangePatient))
        {
            while (await reader.ReadAsync())
            {
                var paziente = new Paziente().getFromDBReader(reader);
                pazienti.Add(paziente);
            }

            await db.CloseReaderAsync(reader);
        }

        pazientiFiltrati = pazienti;
        await db.CloseConnectionAsync();
    }

    public async Task savePatient()
    {
        if (!checkPatientExist())
        {
            //salva il paziente
            nuovoPaziente.Gender = gender != "m";

            Paziente paziente = new Paziente(nuovoPaziente.FirstName, nuovoPaziente.Surname, nuovoPaziente.Gender, "0000000000", "0000000000", "0000000000", "0000000000000000", "0000", nuovoPaziente.BirthDate, "Prova", nuovoPaziente.Foreigner, "Prova", "Prova", false, false, medID, nuovoPaziente.Locked);

            if (!paziente.checkInputs())
            {
                //mostro l'errore
                showFormErr = !showFormErr;
                return;
            }

            paziente.sanitizePatient();

            pazienti.Add(paziente);

            await paziente.saveInDB();

            pazientiFiltrati = pazienti;

            //se è visibile lo tolgo
            if (showFormErr) showFormErr = !showFormErr;
            toggleForm();
            nuovoPaziente = new();
        }
        else
        {
            
        }
    }

    //ritorna true se lo trova
    public bool checkPatientExist()
    {
        db.OpenConnection();
        using (MySqlDataReader r = db.ExecuteReader($"SELECT firstname, surname FROM patient WHERE first_name={nuovoPaziente.FirstName} AND surname={nuovoPaziente.Surname}"))
        {
            db.CloseConnection();
            return r.Read() && r.GetString("first_name") == nuovoPaziente.FirstName && r.GetString("surname") == nuovoPaziente.Surname;
        }
    }

    public async Task deleteFromDB()
    {
        if (lastClickedP == null)
        {
            Console.WriteLine("Nessun paziente selezionato");
            return;
        }

        string queryDeletePatient = "DELETE FROM PATIENT WHERE patientID=" + lastClickedP.PatientID;

        await db.OpenConnectionAsync();

        await db.MakeQueryAsync(queryDeletePatient);

        pazienti.Remove(lastClickedP);
        pazientiFiltrati = pazienti;

        await unLinkPatient();

        lastClickedP = null;

        await db.CloseConnectionAsync();
    }

    public async Task unLinkPatient()
    {
        string queryUnlinkPatient = "UPDATE VISIT SET patientID=-1 WHERE patientID=" + lastClickedP.PatientID;

        await db.OpenConnectionAsync();
        await db.MakeQueryAsync(queryUnlinkPatient);
    }

    public void openModifyPatient()
    {
        nuovoPaziente.FirstName = lastClickedP.FirstName;
        nuovoPaziente.Surname = lastClickedP.Surname;
        nuovoPaziente.Foreigner = lastClickedP.Foreigner;
        nuovoPaziente.BirthProvince = lastClickedP.BirthProvince;
        nuovoPaziente.Gender = lastClickedP.Gender;
        nuovoPaziente.BirthDate = lastClickedP.BirthDate;
        nuovoPaziente.CAsl = lastClickedP.CAsl;
        nuovoPaziente.CF = lastClickedP.CF;
        toggleForm();
    }

}