@page "/"
@page "/Login"
@inject IConfiguration Configuration
@rendermode InteractiveServer
@using MySql.Data.MySqlClient

<PageTitle>Login</PageTitle>
<div class="login-page mainSection">
    <div class="headerRow">
        <div class="brandingGroup">
            <img class="coverImage" src="./assets/loginAssets/sfondoBlu.png" alt="alt text"/>
            <div class="titleContent">
                <div class="titlesGrid">
                    <h1 class="mainTitle">DeltaDent Web</h1>
                    <h3 class="mainSubtitle">La tua scelta per un futuro web</h3>
                </div>
                <button class="registerButton" @onclick="ButtonRegistration">Registrati</button>
            </div>
            <img class="headerIcon" src="./assets/loginAssets/dottore.svg" alt="alt text"/>
        </div>
        <div class="loginGroup">
            <div class="backgroundRectangle"></div>
            <div class="loginContent">
                <div class="welcomeHeader">
                    <h1 class="heroTitle">Ciao!</h1>
                    <h3 class="welcomeSubtitle">Benvenuto</h3>
                </div>
                <div class="emailBox">
                    <input type="email" class="BoxRow imageEmail" placeholder="Email Address"/>
                </div>
                <div class="passwordBox">
                    <input type="password" class="BoxRow imagePassword" placeholder="Password"/>
                </div>
                <button class="loginButton">login</button>
                <h5 class="forgotPassword">Password dimenticata</h5>
                <h5 class="errorMessage invisible">Email e/o password errata</h5>
            </div>
        </div>
    </div>
</div>

@if (_flagBol)
{
    <form class="form" @onsubmit="HandleRegistration">
        <p class="title">Registrati</p>
        <p class="message">Registrati subito per avere accesso all'app.</p>
        <div class="flex">
            <label>
                <input @bind="Nome" placeholder=" " type="text" class="input" maxlength="25">
                <span>Nome</span>
            </label>
            <label>
                <input @bind="Cognome" placeholder=" " type="text" class="input" maxlength="25">
                <span>Cognome</span>
            </label>
        </div>
        <label>
            <input @bind="Email" placeholder=" " type="email" class="input" maxlength="100">
            <span>Email</span>
        </label>
        <label>
            <input @bind="Password" placeholder=" " type="password" class="input" maxlength="100">
            <span>Password</span>
        </label>
        <label>
            <input @bind="ConfermaPassword" placeholder=" " type="password" class="input" maxlength="100">
            <span>Conferma password</span>
        </label>
        @if (err)
        {
            <div class="message">Si Ã¨ verificato un errore, verificare i dati immessi</div>
        }
        <button class="submit" type="submit">Submit</button>
    </form>
}

@code {
    private bool _flagBol = false;
    private bool err = false;
    private string Nome { get; set; }
    private string Cognome { get; set; }
    private string Email { get; set; }
    private string Password { get; set; }
    private string ConfermaPassword { get; set; }

    private void ButtonRegistration()
    {
        _flagBol = !_flagBol;
    }

    private async Task HandleRegistration()
    {
        try
        {
            if (Password != ConfermaPassword || checkExist() || !verifyDoctor())
            {
                err = true;
                return;
            }

            err = false;

            var query = $"INSERT INTO doctor (first_name, surname, email, password) VALUES ('{Nome}', '{Cognome}', '{Email}', '{Password}')";
            DbManager db = new DbManager();
            db.MakeQuery(query);
            db.CloseConnection();

            // Reset dei campi del form dopo la registrazione
            Nome = string.Empty;
            Cognome = string.Empty;
            Email = string.Empty;
            Password = string.Empty;
            ConfermaPassword = string.Empty;

            //Console.WriteLine("Dati inseriti correttamente.");
            ButtonRegistration();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore durante la registrazione dei dati: {ex.Message}");
            err = true;
        }
    }

    // Per prevenire sql injection verifica che gli input non contengano "'" e non siano vuoti, torna true se sono validi
    public bool verifyDoctor()
    {
        return !Nome.Contains("'") && Nome.Length > 0 && !Cognome.Contains("'") && Cognome.Length > 0 && !Email.Contains("'") && Email.Length > 0 && !Password.Contains("'") && Password.Length > 0;
    }

    private bool checkExist()
    {
        string query = $"SELECT email FROM doctor WHERE email='{Email}'";
        DbManager db = new DbManager();
        using (MySqlDataReader reader = db.ExecuteReader(query))
        {
            if (reader.Read())
            {
                if (reader.GetString("email") != null)
                {
                    Console.WriteLine("\n\nEsiste\n\n");
                    db.CloseConnection();
                    return true;
                }
            }
        }

        Console.WriteLine("\n\nNon esiste\n\n");
        db.CloseConnection();
        return false;
    }

}