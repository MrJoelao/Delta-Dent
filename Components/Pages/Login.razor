@page "/"
@page "/Login"

@using Bogus.DataSets
@inject IConfiguration Configuration
@rendermode InteractiveServer
@inject NavigationManager NavManager

<PageTitle>Login</PageTitle>
<div class="login-page mainSection">
    <div class="headerRow">
        <!-- Parte sinistra della finestra -->
        <div class="brandingGroup">
            <img class="coverImage" src="./assets/loginAssets/sfondoBlu.png" alt="alt text"/>
            <div class="titleContent">
                <div class="titlesGrid">
                    <h1 class="mainTitle">DeltaDent Web</h1>
                    <h3 class="mainSubtitle">La tua scelta per un futuro web</h3>
                </div>
                <button class="registerButton" @onclick="ToggleRegistration">Registrati</button>
            </div>
            <img class="headerIcon" src="./assets/loginAssets/dottore.svg" alt="alt text"/>
        </div>
        <!-- Parte destra della finestra -->
        <div class="loginGroup">
            <div class="backgroundRectangle"></div>
            <div class="loginContent">
                <div class="welcomeHeader">
                    <h1 class="heroTitle">Ciao!</h1>
                    <h3 class="welcomeSubtitle">Benvenuto</h3>
                </div>
                <div class="emailBox">
                    <input type="email" @bind="_loggingEmail" class="BoxRow imageEmail" maxlength="100"/>
                </div>
                <div class="passwordBox">
                    <input type="password" @bind="_loggingPassword" class="BoxRow imagePassword" maxlength="100"/>
                </div>
                <button class="loginButton" @onclick="TryLogin">Login</button>
                <h5 class="forgotPassword">Password dimenticata</h5>
                @if (_errLogin)
                {
                    <h5 class="errorMessage">Email e/o password errata</h5>
                }
            </div>
        </div>
    </div>
</div>

@if (_regForm)
{
    <form class="form" @onsubmit="HandleRegistration">
        <p class="title">Registrazione</p>
        <p class="message">Registrati subito per avere accesso a DeltaDent Web</p>
        <div class="flex">
            <label>
                <input @bind="_registerName" placeholder="Nome" type="text" class="input" maxlength="25">
                <span>Nome</span>
            </label>
            <label>
                <input @bind="_registerSurname" placeholder="Cognome" type="text" class="input" maxlength="25">
                <span>Cognome</span>
            </label>
        </div>
        <label>
            <input @bind="_registerEmail" placeholder="Email" type="email" class="input" maxlength="100">
            <span>Email</span>
        </label>
        <label>
            <input @bind="_registerPassword" placeholder="Password" type="password" class="input" maxlength="100">
            <span>Password</span>
        </label>
        <label>
            <input @bind="_registerConfirmPassword" placeholder="Conferma Password" type="password" class="input" maxlength="100">
            <span>Conferma password</span>
        </label>
        @if (_errReg)
        {
            <div class="message">Si Ã¨ verificato un errore, verificare i dati immessi</div>
        }
        <button class="submit" type="submit">Submit</button>
    </form>
}

@code {
    private DbManager db = new DbManager();     // Oggetto utilizzato globalmente nella pagina per interrogare il DB
    private bool _regForm = false;       // Bool per mostrare il form di registrazione
    private bool _errReg = false;        // Bool per mostrare un errore nel form di registrazione
    private bool _errLogin = false;      // Bool per mostrare un errore nel login

    private string _registerName { get; set; }        // Stringa per salvare il nome del medico registrante
    private string _registerSurname { get; set; }     // Stringa per salvare il cognome del medico registrante
    private string _registerEmail { get; set; }       // Stringa per salvare la mail del medico registrante
    private string _registerPassword { get; set; }        // Stringa per salvare la password del medico registrante
    private string _registerConfirmPassword { get; set; }        // Stringa per verificare il corretto inserimento dellap pssword
    private string _loggingEmail { get; set; }       // Stringa per salvare l'email del medico loggante
    private string _loggingPassword { get; set; }       // Stringa per salvare la password del medico loggante

    private Doctor _doctor;

    private async Task HandleRegistration()
    {
        _doctor = new Doctor(_registerName, _registerSurname, true, new DateTime(2001, 10, 10), _registerEmail, _registerPassword, "0000000000", "default");
        if (!_doctor.AreValuesInvalid() || _registerPassword != _registerConfirmPassword  || await db.CheckDoctorExistAsync(_registerEmail))
        {
            // Mostro l'errore
            _errReg = true;
            Console.WriteLine("Data not valid, error message shown");
            return;
        }

        // Lo tolgo
        _errReg = false;

        // Eseguo la query
        if (!(await db.RegisterDoctorQuery(_registerName, _registerSurname, _registerEmail, _registerPassword)))
        {
            return;
        }

        // Faccio il reset dei campi del login
        resetTextLogin();
    }

    // Funzione per resettare i campi del form di registrazione
    private void resetTextLogin()
    {
        _registerName = string.Empty;
        _registerSurname = string.Empty;
        _registerEmail = string.Empty;
        _registerPassword = string.Empty;
        _registerConfirmPassword = string.Empty;
    }

    private void ToggleRegistration() => _regForm = !_regForm;

    // Funzione che verifica se email e password corrispondono a quelle registrate nel DB, e permette o meno l'ingresso nel resto del sito
    private async Task TryLogin()
    {
        _errLogin = false;

        if (!(await db.CheckDoctorExistAsync(_loggingEmail)))
        {
            _errLogin = true;
            Console.WriteLine("Doctor does not exist");
            return;
        }

        if ( !(await db.CheckDoctorCredentialsAsync(_loggingEmail, _loggingPassword)))
        {
            _errLogin = true;
            Console.WriteLine("Doctor password is incorrect");
            return;
        }

        int? medID = await db.GetDoctorIdAsync(_loggingEmail);

        if (medID == null)
        {
            _errLogin = true;
            Console.WriteLine("There was an error while getting the ID of the doctor");
            return;
        }

        NavManager.NavigateTo($"/Anagrafica/{medID}");
    }

}